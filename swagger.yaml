openapi: 3.0.2
info:
  title: Fire Horn League API
  description: '# API'
  version: 1.0.0
servers:
  - url: https://fhl-api.herokuapp.com
    description: Staging API server deployed on Heroku
tags:
  - name: auth
    description: Authorization-related operations
  - name: tournaments
    description: Tournaments and all about them
  - name: users
    description: Operations related to users & user control
  - name: clubs
    description: Operations related to club-accounts
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Create a user
      description: Registrate a user
      requestBody:
        description: Email and password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  default: An email address
                  type: string
                  format: email
                password:
                  description: 'Password that contains at least 8 characters, one uppercase letter and one digit'
                  type: string
            example:
              email: johndoe@example.com
              password: youwillneverguess
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: boolean
  /auth/registrate:
    post:
      tags:
        - auth
      summary: Sign up user
      description: Create user
      requestBody:
        description: Email and password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  default: An email address
                  type: string
                  format: email
                password:
                  description: 'Password that contains at least 8 characters, one uppercase letter and one digit'
                  type: string
            example:
              email: johndoe@example.com
              password: youwillneverguess
      responses:
        '200':
          description: JWT Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    description: JWT Bearer Token
                    type: string
                    format: jwt
                  uid:
                    description: User ID
                    type: integer
                    format: int32
  /auth/forgot:
    post:
      tags:
        - auth
      summary: Request password reset
      description: Allows user to request a password reset
      requestBody:
        description: An email
        required: true
        content:
          application/json:
            example:
              email: janedoe@example.com
            schema:
              type: object
              additionalProperties: false
              properties:
                email:
                  title: Email
                  type: string
                  format: email
                  description: An email
      responses:
        '200':
          description: Successfully set password reset email
          content:
            application/json:
              schema:
                title: Response containing details of the operation
                type: object
                properties:
                  message:
                    type: string
                    title: Message from the server
                  details:
                    title: Details
                    description: An object containing the details of the operation
                    type: object
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Not found
        '405':
          description: Method not allowed
  '/auth/reset-password/{id}':
    put:
      summary: Reset password
      tags:
        - auth
      parameters:
        - name: id
          in: path
          required: true
          allowEmptyValue: false
          style: simple
          schema:
            type: number
            minimum: 0
            exclusiveMinimum: true
        - description: A JWT password restore token
          in: query
          name: token
          allowEmptyValue: false
          schema:
            type: string
            nullable: false
            title: JWT
            format: jwt
      requestBody:
        description: JSON body containing a new password
        required: true
        content:
          application/json:
            schema:
              title: New password
              type: string
              nullable: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: Response containing details of the operation
                type: object
                properties:
                  message:
                    type: string
                    title: Status of the operation
                    example: ok
                  details:
                    title: Details
                    description: An object containing the details of the operation
                    type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error message
  /auth/confirm:
    get:
      tags:
        - auth
      summary: Confirm email address
      description: Confirm user email
      parameters:
        - description: A JWT password restore token
          in: query
          name: token
          allowEmptyValue: false
          schema:
            type: string
            nullable: false
            title: JWT
            format: jwt
      responses:
        '200':
          description: Successfully set password reset email
          content:
            application/json:
              example:
                status: ok
                id: 42
              schema:
                title: Response containing details of the operation
                type: object
                properties:
                  message:
                    type: string
                    title: Message from the server
                  id:
                    title: User ID
                    type: integer
                    format: int32
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error message
  '/users/{id}':
    get:
      tags:
        - users
      description: Returns a single user with the given ID
      summary: Find user by ID
      parameters:
        - name: id
          in: path
          required: true
          allowEmptyValue: false
          style: simple
          schema:
            type: number
            minimum: 0
            exclusiveMinimum: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  first_name:
                    type: string
                  last_name:
                    type: string
                  nick_name:
                    type: string
                  city:
                    type: string
                  phone:
                    type: string
                  rank:
                    type: string
                  fullName:
                    type: string
                  active:
                    type: boolean
                  isApproved:
                    type: boolean
                  main_role:
                    type: string
                  email:
                    type: string
                    format: email
                  additional_roles:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error message
  /users/players:
    get:
      tags:
        - users
      summary: Get all players
      description: Returns a list of all users with role "PLAYER"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: array of all player users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    first_name:
                      type: string
                    last_name:
                      type: string
                    nick_name:
                      type: string
                    city:
                      type: string
                    phone:
                      type: string
                    rank:
                      type: string
                    fullName:
                      type: string
                    active:
                      type: boolean
                    isApproved:
                      type: boolean
                    main_role:
                      type: string
                    email:
                      type: string
                      format: email
                    additional_roles:
                      type: array
                      items:
                        type: string
  '/users/{id}/profile':
    put:
      tags:
        - users
      summary: Updates information in a user's profile
      description: Update information about a user with the supplied values
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          allowEmptyValue: false
          style: simple
          schema:
            type: number
            minimum: 0
            exclusiveMinimum: true
      requestBody:
        description: User profile information
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                first_name:
                  type: string
                  nullable: false
                last_name:
                  type: string
                  nullable: false
                nick_name:
                  type: string
                  nullable: false
                city:
                  type: string
                  nullable: false
                phone:
                  type: string
                  nullable: false
                rank:
                  type: string
                  nullable: false
                main_role:
                  enum:
                    - MAIN
                    - TOP
                    - MIDDLE
                    - JUNGLE
                    - BOT
                additional_roles:
                  type: array
                  items:
                    enum:
                      - MAIN
                      - TOP
                      - MIDDLE
                      - JUNGLE
                      - BOT
      responses:
        '200':
          description: Updated user model
          content:
            application/json:
              schema:
                type: object
                properties:
                  first_name:
                    type: string
                  last_name:
                    type: string
                  nick_name:
                    type: string
                  city:
                    type: string
                  phone:
                    type: string
                  rank:
                    type: string
                  fullName:
                    type: string
                  active:
                    type: boolean
                  isApproved:
                    type: boolean
                  main_role:
                    type: string
                  email:
                    type: string
                    format: email
                  additional_roles:
                    type: array
                    items:
                      type: string
  /users/{id}/approve:
    patch:
      tags:
        - users
      summary: Approve user profile 
      description: Update user approvement status
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          allowEmptyValue: false
          style: simple
          schema:
            type: number
            minimum: 0
            exclusiveMinimum: true
      requestBody:
        description: value of approvement status
        content:
         application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                status  :
                  type: boolean
                  nullable: false
      responses:
        '200': 
          description: Updated status of the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    minimum: 0
                  status:
                    type: boolean
                    nullable: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error message
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Not found
  /tournaments:
    get:
      tags:
        - tournaments
      summary: Get all tournaments
      description: Returns an array of all tournaments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: An array of Team data models
                type: array
                additionalProperties: false
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    shortName:
                      type: string
                    crew:
                      type: array
                      items:
                        type: string
  '/tournaments/{id}':
    get:
      tags:
        - tournaments
      summary: Find tournament by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          allowEmptyValue: false
          style: simple
          schema:
            type: number
            minimum: 0
            exclusiveMinimum: true
      responses:
        '200':
          description: On success returns a Tournament data model
          content:
            application/json:
              schema:
                type: object
                title: Team
                properties:
                  banner:
                    type: string
                  photos:
                    type: array
                    items:
                      type: string
                  schedule:
                    type: array
                    items:
                      type: object
                  date:
                    type: string
                    format: date
                  description:
                    type: string
                  regulations:
                    type: string
                  challonge_link:
                    type: string
                  teams:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        shortName:
                          type: string
                        crew:
                          type: array
                          items:
                            type: string
  /tournaments/create:
    post:
      tags:
        - tournaments
      summary: Create tournament with the given info
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - name
              properties:
                name:
                  type: string
                  description: Name of the tournament
                schedule_link:
                  type: string
                banner:
                  type: string
                  description: Tournament banner
                photos:
                  type: array
                  description: Array of tournament photots
                  items:
                    type: string
                schedule:
                  type: string
                date:
                  type: string
                  format: date
      responses:
        '201':
          description: Returns an instance of the created tournament
          content:
            application/json:
              schema:
                type: object
                title: Team
                properties:
                  banner:
                    type: string
                  photos:
                    type: array
                    items:
                      type: string
                  schedule:
                    type: array
                    items:
                      type: object
                  date:
                    type: string
                    format: date
                  description:
                    type: string
                  regulations:
                    type: string
                  challonge_link:
                    type: string
                  teams:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        shortName:
                          type: string
                        crew:
                          type: array
                          items:
                            type: string
  /clubs: 
    get:
      tags:
        - clubs
      summary: Get all clubs
      description: Returns an array of all clubs
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: An array of Club data models
                type: array
                additionalProperties: false
                items:
                  type: object
                  properties:
                    login:
                      type: string
                    pasword: 
                      type: string
                    name: 
                      type: string
                    phone:
                      type: string
                    city:
                      type: string
                    vk_link:
                      type: string
                    insta_link:
                      type: string
                    main_role:
                      type: string
                    banner:
                      type: string
                    potos:
                      type: string
  /clubs/{id}:
    get:
      tags:
        - clubs
      summary: Get club by id
      description: Returns specified club
      parameters:
        - name: id
          in: path
          required: true
          allowEmptyValue: false
          style: simple
          schema:
            type: number
            minimum: 0
            exclusiveMinimum: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: Club data models
                type: object
                properties:
                    login:
                      type: string
                    pasword: 
                      type: string
                    name: 
                      type: string
                    phone:
                      type: string
                    city:
                      type: string
                    vk_link:
                      type: string
                    insta_link:
                      type: string
                    main_role:
                      type: string
                    banner:
                      type: string
                    potos:
                      type: string
components:
  responses:
    '200':
      description: Sucessful
      content:
        application/json: {}
    '201':
      description: Resource created
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Description of the error message
    '403':
      description: Forbidden
    '404':
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Not found
    '405':
      description: Method not allowed
    '422':
      description: Invalid data
  parameters:
    entityIdInt:
      name: id
      in: path
      required: true
      allowEmptyValue: false
      style: simple
      schema:
        type: number
        minimum: 0
        exclusiveMinimum: true
      description: ID of the entity
    token:
      description: JWT
      in: query
      name: token
      allowEmptyValue: false
      schema:
        type: string
        nullable: false
        title: JWT
        format: jwt
  schemas:
    User:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        nick_name:
          type: string
        city:
          type: string
        phone:
          type: string
        rank:
          type: string
        fullName:
          type: string
        active:
          type: boolean
        isApproved:
          type: boolean
        main_role:
          type: string
        email:
          type: string
          format: email
        additional_roles:
          type: array
          items:
            type: string
      x-examples:
        example-1:
          value:
            first_name: string
            last_name: string
            nick_name: string
            city: string
            phone: string
            rank: string
            fullName: string
            active: true
            isApproved: true
            main_role: string
            email: user@example.com
            additional_roles:
              - string
    Tournament:
      type: object
      title: Team
      properties:
        banner:
          type: string
        photos:
          type: array
          items:
            type: string
        schedule:
          type: array
          items:
            type: object
        date:
          type: string
          format: date
        description:
          type: string
        regulations:
          type: string
        challonge_link:
          type: string
        teams:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              shortName:
                type: string
              crew:
                type: array
                items:
                  type: string
    Team:
      type: object
      properties:
        name:
          type: string
        shortName:
          type: string
        crew:
          type: array
          items:
            type: string
    Club: 
      type: object
      properties:
        login:
          type: string
        pasword: 
          type: string
        name: 
          type: string
        phone:
          type: string
        city:
          type: string
        vk_link:
          type: string
        insta_link:
          type: string
        main_role:
          type: string
        banner:
          type: string
        potos:
          type: string
    playerRole:
      enum:
        - MAIN
        - TOP
        - MIDDLE
        - JUNGLE
        - BOT
  requestBodies:
    emailAndPassword:
      description: Email and password
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                default: An email address
                type: string
                format: email
              password:
                description: 'Password that contains at least 8 characters, one uppercase letter and one digit'
                type: string
          example:
            email: johndoe@example.com
            password: youwillneverguess
    tournamentCreate:
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            required:
              - name
            properties:
              name:
                type: string
                description: Name of the tournament
              schedule_link:
                type: string
              banner:
                type: string
                description: Tournament banner
              photos:
                type: array
                description: Array of tournament photots
                items:
                  type: string
              schedule:
                type: string
              date:
                type: string
                format: date
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
